06

14.矢量化
def 标量函数(标量参数):
       ...
       return 标量返回值
矢量返回值 = numpy.vectorize(标量函数)(矢量参数)
代码：vec.py、sim.py


15.数据平滑
卷积降噪->曲线拟合->计算特征->指导业务
y = f(x)
y = g(x)
y = f(x) - g(x) = 0


二、矩阵和ufunc


1.创建矩阵
numpy中的矩阵是matrix类类型的对象，matrix类是ndarray类的子类，对某些专门针对矩阵的运算做了重载，增加部分新的属性和方法。
numpy.matrix(可被解释为矩阵的二维容器,
    copy=是否复制数据[True])->矩阵对象
numpy.mat(可被解释为矩阵的二维容器)->矩阵对象，数据共享
可被解释为矩阵的二维容器也可以用字符串表示，如：
'1 2 3; 4 5 6; 7 8 9'
numpy.bmat(子矩阵的块组合字符串)->组合矩阵
'A B; C D'
代码：mat.py


2.ufunc，通用函数，统一函数
numpy.ufunc是一个类，由该类所创建的对象可被当做函数调用，在执行过程中，会根据所接收的矢量化参数中的元素，依次调用其内部封装的标量化函数，并将其返回的标量结果组织成矢量返回调用者。
标量函数(标量)->标量
numpy.frompyfunc(标量函数, 参数个数, 返回值个数)->
    ufunc类型的对象
ufunc类型的对象(矢量)->矢量
代码：ufunc.py
代码:veb2.py

下面是几个预定义的ufunc对象
2)numpy.add
numpy.add.reduce(数组)			->元素累加和
numpy.add.accumulate(数组)		->元素累加的过程
numpy.add.reductat(数组, 位置)	->分段累加
numpy.add.outer(数组, 数组)		->外和
a: [1 2 3]
b: [4 5 6 7]
numpy.add.outer(a, b)
    4 5 6   7
1  5 6 7   8
2  6 7 8   9
3  7 8 9 10
代码：add.py


4.除法ufunc预定义对象
1)真除：[5 5 -5 -5]<真除>[2 -2 2 -2] = [2.5 -2.5 -2.5 2.5]
numpy.true_divide()
numpy.divide()
/
2)地板除：[5 5 -5 -5]<地板除>[2 -2 2 -2] = [2 -3 -3 2]   #向下取整数
numpy.floor_divide()
//
3)天花板除：[5 5 -5 -5]<天花板除>[2 -2 2 -2] = [3 -2 -2 3] #向上取整
numpy.ceil(a/b).astype(int)
4)截断除：[5 5 -5 -5]<截断除>[2 -2 2 -2] = [2 -2 -2 2]
numpy.trunc(a/b).astype(int)
代码:div.py

5.取余ufunc预定义对象
被除数<除以>除数=商...余数
5<除以>2=2...1
除数<乘以>商+余数=被除数
1)地板模：
[5 5 -5 -5]<地板除>[2 -2 2 -2] = [2 -3 -3 2]...[1 -1 1 -1]
numpy.remainder()
numpy.mod()
%
2)截断模：
[5 5 -5 -5]<截断除>[2 -2 2 -2] = [2 -2 -2 2]...[1 1 -1 -1]
numpy.fmod()
代码：mod.py


6.python语言中绝大部分的运算符都被numpy通过ufunc进行了重载定义，使之能够支持数组间的运算。
1 1 2 3 5 8 13 21 ... ? ...
                                  n
利用矩阵乘方的方法来求斐波那契的第n项
f(n) = f(n-1) + f(n-2), n >= 3
f(1) = f(2) = 1

     1 1  1 1  1 1
     1 0  1 0  1 0
1 1  2 1  3 2  5 3     fn     #取矩阵(0,0)那个元素
1 0  1 1  2 1  3 2 ...
F1   F2   F3   F4      Fn-1   #(n-1)次方
幂运算符：**
代码：fibo.py

7.实现三角函数的ufunc预定义对象
在水平和垂直方向上有啷个不同振幅,频率和初相位的简谐振动,求他们合成以后的运动轨迹(利萨如曲线)
简谐振动:物体在与位移成正比的恢复力作用下,在其平衡位置附近按正弦规律做往复的运动.
x = Asin(at+pi/2)
y = Bsin(bt)
#A是振幅,a是角频率,pi/2是初相位
#问题就变成x和y关于时间t的正弦函数
利萨如曲线
代码：lissa.py

把不同频率和振幅的正弦信号相叠加

方波发生器
4sin(1x)     4sin(3x)     4sin(5x)               4sin((2k-1)x)
--------- + ---------- + ---------- + ...
   1pi              3pi               5pi         (2k-1)pi
   1                 2                   3              k
代码：squr.py


8.位运算
1)异或：^/__xor__/bitwise_xor
0 ^ 0 = 0
0 ^ 1 = 1
1 ^ 0 = 1
1 ^ 1 = 0
if a^b < 0 then a和b异号
2)与：&/__and__/bitwise_and
0 & 0 = 0
0 & 1 = 0
1 & 0 = 0
1 & 1 = 1
  1 00000001 - 1 = 00000000
  2 00000010 - 1 = 00000001
  4 00000100 - 1 = 00000011
  8 00001000 - 1 = 00000111
 16 00010000 - 1 = 00001111
     \________&________/
              |
              v
              0
if a & (a-1) == 0 then a是2的幂
3)移位
右移位：>>/__rshift__/right_shift: >>1 <==> /2
左移位：<</__lshift__/left_shift: <<1 <==> x2
代码：bit.py

三、Numpy的子模块
1.线性代数子模块(linalg)
1)矩阵的逆矩阵：inv()

若矩阵A和矩阵B的乘积是一个单位矩阵，则成A和B互为逆矩阵：A x A^-1 = E, A必须是方阵
代码：inv.py


2)解线性方程组
/ x-2y+z=0
| 2y-8z-8=0
\ -4x+5y+9z+9=0
x-7z-8=0
5x-10y+5z=0
-8x+10y+18z+18=0
-3x+23z+18=0
3x-21z-24=0
2z-6=0
z=3
x-21-8=0
x=29
29-2y+3=0
y=16
/  1x + -2y + 1z = 0
|   0x + 2y + -8z = 8
\ -4x + 5y + 9z = -9
/  1  -2  1 \    / x \    /  0 \
|   0   2 -8 | x | y | = |  8  |
\ -4   5  9 /    \ z /    \ -9 /
------------    -----    ------
         a              x           b
                         = nump.linalg.lstsq(a, b)[0]
                         = nump.linalg.solve(a, b)
代码：solve.py



3)特征值和特征向量
对于n阶方阵A，如果存在数a和非零n维向量x，使得Ax=ax成立，
则称a是矩阵A的一个特征值，x是矩阵A属于特征值a的特征向量。
           x    z
           x a z
           x    z
A A A y    v
A A A y >=
A A A y
numpy.linalg.eig(A)->[特征值1    特征值2     ...]
                                     [[特征向量1 特征向量2 ...]
                                        ...              ...              ...]]
代码：eig.py



4)奇异值分解
对于一个满足特定条件的矩阵M,可以被分解为三个矩阵的乘积,M=USV,
其中U和V都是正交矩阵,即UU^T=I,VV^T=I(I指单位阵),S矩阵除主对角线以外的元素均为0,主对角线上的元素被称为矩阵M的奇异值,
numpy.linalg.svd(M)  -> U,S主对角线上的元素,V


M = U x Sigma x V
         |             |      |
      正交          |   正交
      UU^T=E  |   VV^T=E
                       |
只有主对角线上的元素非零
其它元素全部为零，主对角
线上的非零元素称为矩阵M
的奇异值
numpy.linalg.svd(M, full_matrices=False)->
    U, 奇异值(Sigma的主对角线), V
代码：svd.py


5)广义逆矩阵
广义逆矩阵将矩阵求逆的运算法则有方阵推广到非方阵，只要AxB=E，即使A并非方阵，仍然可以称B为其广义逆矩阵。非方阵的I属性即其广义逆阵。
numpy.linalg.pinv(A)->A的广义逆矩阵
代码：pinv.py


6)行列式
a b
c d
ad - bc
a b c
d e f
g h i
a e f - b d f + c d e
   h i       g i        g h
a(ei-fh) - b(di-fg) + c(dh-eg)
aei - afh - bdi + bfg + cdh - ceg
numpy.linalg.det(方阵)->行列式的值      #标量
代码：det.py



2.快速傅里叶变换子模块(fft)
傅里叶定理：任何周期函数，总可以被分解为有限个不同幅值、频率和初相位的正弦函数。
f(t) - 时间域
(A,fai)(w) - 频率域
numpy.fft.fftfreq(采样数, 采样周期)->频率数组(Hz)
numpy.fft.fft(时域信号)->频域复数数组
numpy.fft.ifft(频域复数数组)->时域信号
代码：fft.py
